# compiler explorer: https://gcc.godbolt.org/

- note in general how variables/arrays are stored is compiler dependent.

- for how global (also applies for static variables I think) variables and arrays are allocated and saved in the binary during compilation, see https://stackoverflow.com/questions/21350478/what-does-memory-allocated-at-compile-time-really-mean and specifically, manu's, supercat's, Elias Van Ootegem's and mah's answers. Also, run code compiler_explorer/comp_memory_explorer.cpp in compiler explorer. Note this example shows dynamic arrays are not assigned required memory at compilation time, as they are constantly assigned 8 bytes regardless of their size. Also, array only increases size of binary by its size if it is initialised.

- for local variables, the situation is much more complicated. Again, see compiler_explorer/comp_memory_explorer.cpp in compiler explorer.

- classes also complicated, but their methods seem to act similar to functions. Again see comp_memory_explorer.cpp.

# types and keywords

- Static variables when used inside functions are initialised only once, and then they hold their value even through function calls. Static elements are allocated storage only once in a program lifetime in static storage area. 


